// Code generated by protoc-gen-go. DO NOT EDIT.
// source: dbservice-factory.proto

package protobuf

/*
Echo Service

Echo Service API consists of a single service which returns
a message.
*/

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// Embedded represents a message embedded in SimpleMessage.
type Embedded struct {
	// Types that are valid to be assigned to Mark:
	//	*Embedded_Progress
	//	*Embedded_Note
	Mark                 isEmbedded_Mark `protobuf_oneof:"mark"`
	XXX_NoUnkeyedLiteral struct{}        `json:"-"`
	XXX_unrecognized     []byte          `json:"-"`
	XXX_sizecache        int32           `json:"-"`
}

func (m *Embedded) Reset()         { *m = Embedded{} }
func (m *Embedded) String() string { return proto.CompactTextString(m) }
func (*Embedded) ProtoMessage()    {}
func (*Embedded) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbservice_factory_445af335c1f858fa, []int{0}
}
func (m *Embedded) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Embedded.Unmarshal(m, b)
}
func (m *Embedded) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Embedded.Marshal(b, m, deterministic)
}
func (dst *Embedded) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Embedded.Merge(dst, src)
}
func (m *Embedded) XXX_Size() int {
	return xxx_messageInfo_Embedded.Size(m)
}
func (m *Embedded) XXX_DiscardUnknown() {
	xxx_messageInfo_Embedded.DiscardUnknown(m)
}

var xxx_messageInfo_Embedded proto.InternalMessageInfo

type isEmbedded_Mark interface {
	isEmbedded_Mark()
}

type Embedded_Progress struct {
	Progress int64 `protobuf:"varint,1,opt,name=progress,proto3,oneof"`
}

type Embedded_Note struct {
	Note string `protobuf:"bytes,2,opt,name=note,proto3,oneof"`
}

func (*Embedded_Progress) isEmbedded_Mark() {}

func (*Embedded_Note) isEmbedded_Mark() {}

func (m *Embedded) GetMark() isEmbedded_Mark {
	if m != nil {
		return m.Mark
	}
	return nil
}

func (m *Embedded) GetProgress() int64 {
	if x, ok := m.GetMark().(*Embedded_Progress); ok {
		return x.Progress
	}
	return 0
}

func (m *Embedded) GetNote() string {
	if x, ok := m.GetMark().(*Embedded_Note); ok {
		return x.Note
	}
	return ""
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Embedded) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Embedded_OneofMarshaler, _Embedded_OneofUnmarshaler, _Embedded_OneofSizer, []interface{}{
		(*Embedded_Progress)(nil),
		(*Embedded_Note)(nil),
	}
}

func _Embedded_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Embedded)
	// mark
	switch x := m.Mark.(type) {
	case *Embedded_Progress:
		b.EncodeVarint(1<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.Progress))
	case *Embedded_Note:
		b.EncodeVarint(2<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Note)
	case nil:
	default:
		return fmt.Errorf("Embedded.Mark has unexpected type %T", x)
	}
	return nil
}

func _Embedded_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Embedded)
	switch tag {
	case 1: // mark.progress
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Mark = &Embedded_Progress{int64(x)}
		return true, err
	case 2: // mark.note
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Mark = &Embedded_Note{x}
		return true, err
	default:
		return false, nil
	}
}

func _Embedded_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Embedded)
	// mark
	switch x := m.Mark.(type) {
	case *Embedded_Progress:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.Progress))
	case *Embedded_Note:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Note)))
		n += len(x.Note)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// SimpleMessage represents a simple message sent to the Echo service.
type SimpleMessage struct {
	// Id represents the message identifier.
	Id  string `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Num int64  `protobuf:"varint,2,opt,name=num,proto3" json:"num,omitempty"`
	// Types that are valid to be assigned to Code:
	//	*SimpleMessage_LineNum
	//	*SimpleMessage_Lang
	Code   isSimpleMessage_Code `protobuf_oneof:"code"`
	Status *Embedded            `protobuf:"bytes,5,opt,name=status,proto3" json:"status,omitempty"`
	// Types that are valid to be assigned to Ext:
	//	*SimpleMessage_En
	//	*SimpleMessage_No
	Ext                  isSimpleMessage_Ext `protobuf_oneof:"ext"`
	XXX_NoUnkeyedLiteral struct{}            `json:"-"`
	XXX_unrecognized     []byte              `json:"-"`
	XXX_sizecache        int32               `json:"-"`
}

func (m *SimpleMessage) Reset()         { *m = SimpleMessage{} }
func (m *SimpleMessage) String() string { return proto.CompactTextString(m) }
func (*SimpleMessage) ProtoMessage()    {}
func (*SimpleMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_dbservice_factory_445af335c1f858fa, []int{1}
}
func (m *SimpleMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_SimpleMessage.Unmarshal(m, b)
}
func (m *SimpleMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_SimpleMessage.Marshal(b, m, deterministic)
}
func (dst *SimpleMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_SimpleMessage.Merge(dst, src)
}
func (m *SimpleMessage) XXX_Size() int {
	return xxx_messageInfo_SimpleMessage.Size(m)
}
func (m *SimpleMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_SimpleMessage.DiscardUnknown(m)
}

var xxx_messageInfo_SimpleMessage proto.InternalMessageInfo

func (m *SimpleMessage) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

func (m *SimpleMessage) GetNum() int64 {
	if m != nil {
		return m.Num
	}
	return 0
}

type isSimpleMessage_Code interface {
	isSimpleMessage_Code()
}

type SimpleMessage_LineNum struct {
	LineNum int64 `protobuf:"varint,3,opt,name=line_num,json=lineNum,proto3,oneof"`
}

type SimpleMessage_Lang struct {
	Lang string `protobuf:"bytes,4,opt,name=lang,proto3,oneof"`
}

func (*SimpleMessage_LineNum) isSimpleMessage_Code() {}

func (*SimpleMessage_Lang) isSimpleMessage_Code() {}

func (m *SimpleMessage) GetCode() isSimpleMessage_Code {
	if m != nil {
		return m.Code
	}
	return nil
}

func (m *SimpleMessage) GetLineNum() int64 {
	if x, ok := m.GetCode().(*SimpleMessage_LineNum); ok {
		return x.LineNum
	}
	return 0
}

func (m *SimpleMessage) GetLang() string {
	if x, ok := m.GetCode().(*SimpleMessage_Lang); ok {
		return x.Lang
	}
	return ""
}

func (m *SimpleMessage) GetStatus() *Embedded {
	if m != nil {
		return m.Status
	}
	return nil
}

type isSimpleMessage_Ext interface {
	isSimpleMessage_Ext()
}

type SimpleMessage_En struct {
	En int64 `protobuf:"varint,6,opt,name=en,proto3,oneof"`
}

type SimpleMessage_No struct {
	No *Embedded `protobuf:"bytes,7,opt,name=no,proto3,oneof"`
}

func (*SimpleMessage_En) isSimpleMessage_Ext() {}

func (*SimpleMessage_No) isSimpleMessage_Ext() {}

func (m *SimpleMessage) GetExt() isSimpleMessage_Ext {
	if m != nil {
		return m.Ext
	}
	return nil
}

func (m *SimpleMessage) GetEn() int64 {
	if x, ok := m.GetExt().(*SimpleMessage_En); ok {
		return x.En
	}
	return 0
}

func (m *SimpleMessage) GetNo() *Embedded {
	if x, ok := m.GetExt().(*SimpleMessage_No); ok {
		return x.No
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*SimpleMessage) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _SimpleMessage_OneofMarshaler, _SimpleMessage_OneofUnmarshaler, _SimpleMessage_OneofSizer, []interface{}{
		(*SimpleMessage_LineNum)(nil),
		(*SimpleMessage_Lang)(nil),
		(*SimpleMessage_En)(nil),
		(*SimpleMessage_No)(nil),
	}
}

func _SimpleMessage_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*SimpleMessage)
	// code
	switch x := m.Code.(type) {
	case *SimpleMessage_LineNum:
		b.EncodeVarint(3<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.LineNum))
	case *SimpleMessage_Lang:
		b.EncodeVarint(4<<3 | proto.WireBytes)
		b.EncodeStringBytes(x.Lang)
	case nil:
	default:
		return fmt.Errorf("SimpleMessage.Code has unexpected type %T", x)
	}
	// ext
	switch x := m.Ext.(type) {
	case *SimpleMessage_En:
		b.EncodeVarint(6<<3 | proto.WireVarint)
		b.EncodeVarint(uint64(x.En))
	case *SimpleMessage_No:
		b.EncodeVarint(7<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.No); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("SimpleMessage.Ext has unexpected type %T", x)
	}
	return nil
}

func _SimpleMessage_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*SimpleMessage)
	switch tag {
	case 3: // code.line_num
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Code = &SimpleMessage_LineNum{int64(x)}
		return true, err
	case 4: // code.lang
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeStringBytes()
		m.Code = &SimpleMessage_Lang{x}
		return true, err
	case 6: // ext.en
		if wire != proto.WireVarint {
			return true, proto.ErrInternalBadWireType
		}
		x, err := b.DecodeVarint()
		m.Ext = &SimpleMessage_En{int64(x)}
		return true, err
	case 7: // ext.no
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(Embedded)
		err := b.DecodeMessage(msg)
		m.Ext = &SimpleMessage_No{msg}
		return true, err
	default:
		return false, nil
	}
}

func _SimpleMessage_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*SimpleMessage)
	// code
	switch x := m.Code.(type) {
	case *SimpleMessage_LineNum:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.LineNum))
	case *SimpleMessage_Lang:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(len(x.Lang)))
		n += len(x.Lang)
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	// ext
	switch x := m.Ext.(type) {
	case *SimpleMessage_En:
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(x.En))
	case *SimpleMessage_No:
		s := proto.Size(x.No)
		n += 1 // tag and wire
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

func init() {
	proto.RegisterType((*Embedded)(nil), "grpc.gateway.examples.examplepb.Embedded")
	proto.RegisterType((*SimpleMessage)(nil), "grpc.gateway.examples.examplepb.SimpleMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EchoServiceClient is the client API for EchoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EchoServiceClient interface {
	// Echo method receives a simple message and returns it.
	//
	// The message posted as the id parameter will also be
	// returned.
	Echo(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	// EchoBody method receives a simple message and returns it.
	EchoBody(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
	// EchoDelete method receives a simple message and returns it.
	EchoDelete(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error)
}

type echoServiceClient struct {
	cc *grpc.ClientConn
}

func NewEchoServiceClient(cc *grpc.ClientConn) EchoServiceClient {
	return &echoServiceClient{cc}
}

func (c *echoServiceClient) Echo(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.EchoService/Echo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoBody(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.EchoService/EchoBody", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *echoServiceClient) EchoDelete(ctx context.Context, in *SimpleMessage, opts ...grpc.CallOption) (*SimpleMessage, error) {
	out := new(SimpleMessage)
	err := c.cc.Invoke(ctx, "/grpc.gateway.examples.examplepb.EchoService/EchoDelete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EchoServiceServer is the server API for EchoService service.
type EchoServiceServer interface {
	// Echo method receives a simple message and returns it.
	//
	// The message posted as the id parameter will also be
	// returned.
	Echo(context.Context, *SimpleMessage) (*SimpleMessage, error)
	// EchoBody method receives a simple message and returns it.
	EchoBody(context.Context, *SimpleMessage) (*SimpleMessage, error)
	// EchoDelete method receives a simple message and returns it.
	EchoDelete(context.Context, *SimpleMessage) (*SimpleMessage, error)
}

func RegisterEchoServiceServer(s *grpc.Server, srv EchoServiceServer) {
	s.RegisterService(&_EchoService_serviceDesc, srv)
}

func _EchoService_Echo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).Echo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.EchoService/Echo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).Echo(ctx, req.(*SimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoBody_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoBody(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.EchoService/EchoBody",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoBody(ctx, req.(*SimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _EchoService_EchoDelete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SimpleMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EchoServiceServer).EchoDelete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/grpc.gateway.examples.examplepb.EchoService/EchoDelete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EchoServiceServer).EchoDelete(ctx, req.(*SimpleMessage))
	}
	return interceptor(ctx, in, info, handler)
}

var _EchoService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "grpc.gateway.examples.examplepb.EchoService",
	HandlerType: (*EchoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Echo",
			Handler:    _EchoService_Echo_Handler,
		},
		{
			MethodName: "EchoBody",
			Handler:    _EchoService_EchoBody_Handler,
		},
		{
			MethodName: "EchoDelete",
			Handler:    _EchoService_EchoDelete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dbservice-factory.proto",
}

func init() {
	proto.RegisterFile("dbservice-factory.proto", fileDescriptor_dbservice_factory_445af335c1f858fa)
}

var fileDescriptor_dbservice_factory_445af335c1f858fa = []byte{
	// 469 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb4, 0x53, 0xbd, 0x6e, 0xd4, 0x40,
	0x10, 0xce, 0xda, 0xce, 0xc5, 0x99, 0x08, 0x14, 0xad, 0x40, 0x31, 0x97, 0xa0, 0x9c, 0x2c, 0x8a,
	0x23, 0x12, 0x5e, 0xdd, 0xd1, 0x41, 0xc5, 0x89, 0xa0, 0x34, 0x50, 0x38, 0xdd, 0x35, 0xd1, 0xda,
	0x3b, 0x71, 0x2c, 0xec, 0x5d, 0xcb, 0x5e, 0x87, 0x9c, 0xac, 0x6b, 0x90, 0xe8, 0xa0, 0xa2, 0xe7,
	0x11, 0xe8, 0x78, 0x0c, 0x2a, 0x5e, 0x81, 0x07, 0x41, 0xbb, 0x77, 0x87, 0x04, 0x89, 0x12, 0xa5,
	0x48, 0x37, 0x7f, 0xdf, 0x7c, 0xdf, 0x7e, 0x63, 0xc3, 0x8e, 0x48, 0x1a, 0xac, 0xcf, 0xf3, 0x14,
	0x9f, 0x9d, 0xf2, 0x54, 0xab, 0x7a, 0x16, 0x55, 0xb5, 0xd2, 0x8a, 0xee, 0x67, 0x75, 0x95, 0x46,
	0x19, 0xd7, 0xf8, 0x81, 0xcf, 0x22, 0xbc, 0xe0, 0x65, 0x55, 0x60, 0xb3, 0x0a, 0xaa, 0xa4, 0xbf,
	0x97, 0x29, 0x95, 0x15, 0xc8, 0x78, 0x95, 0x33, 0x2e, 0xa5, 0xd2, 0x5c, 0xe7, 0x4a, 0x36, 0x0b,
	0x78, 0xf8, 0x06, 0xfc, 0xc3, 0x32, 0x41, 0x21, 0x50, 0xd0, 0x3d, 0xf0, 0xab, 0x5a, 0x65, 0x35,
	0x36, 0x4d, 0x40, 0x06, 0x64, 0xe8, 0x1e, 0xad, 0xc5, 0x7f, 0x2b, 0xf4, 0x01, 0x78, 0x52, 0x69,
	0x0c, 0x9c, 0x01, 0x19, 0x6e, 0x1e, 0xad, 0xc5, 0x36, 0x9b, 0xf4, 0xc0, 0x2b, 0x79, 0xfd, 0x3e,
	0xfc, 0xe4, 0xc0, 0xbd, 0xe3, 0xdc, 0x50, 0xbe, 0xc5, 0xa6, 0xe1, 0x19, 0xd2, 0xfb, 0xe0, 0xe4,
	0xc2, 0xee, 0xd9, 0x8c, 0x9d, 0x5c, 0xd0, 0x6d, 0x70, 0x65, 0x5b, 0x5a, 0xb8, 0x1b, 0x9b, 0x90,
	0xee, 0x82, 0x5f, 0xe4, 0x12, 0x4f, 0x4c, 0xd9, 0x5d, 0xf2, 0x6d, 0x98, 0xca, 0xbb, 0xb6, 0x34,
	0x74, 0x05, 0x97, 0x59, 0xe0, 0xad, 0xe8, 0x4c, 0x46, 0x5f, 0x41, 0xaf, 0xd1, 0x5c, 0xb7, 0x4d,
	0xb0, 0x3e, 0x20, 0xc3, 0xad, 0xf1, 0xd3, 0xe8, 0x86, 0xe7, 0x47, 0xab, 0xd7, 0xc5, 0x4b, 0x20,
	0xdd, 0x06, 0x07, 0x65, 0xd0, 0xb3, 0x7c, 0x24, 0x76, 0x50, 0xd2, 0x97, 0xe0, 0x48, 0x15, 0x6c,
	0xdc, 0x72, 0xa1, 0x01, 0x4b, 0x65, 0x0c, 0x48, 0x95, 0xc0, 0xc9, 0x3a, 0xb8, 0x78, 0xa1, 0xc7,
	0x3f, 0x3d, 0xd8, 0x3a, 0x4c, 0xcf, 0xd4, 0xf1, 0xe2, 0x58, 0xf4, 0x9b, 0x03, 0x9e, 0xc9, 0x69,
	0x74, 0xe3, 0xe2, 0x7f, 0xec, 0xeb, 0xdf, 0x72, 0x3e, 0xfc, 0x41, 0x3e, 0xfe, 0xfa, 0xfd, 0xd5,
	0xf9, 0x4e, 0xc2, 0x87, 0xec, 0x7c, 0xc4, 0x96, 0x63, 0x0c, 0xd3, 0x33, 0xc5, 0xba, 0x5c, 0xcc,
	0xa7, 0x8f, 0xe9, 0xee, 0x95, 0x0d, 0xd6, 0xc9, 0xb6, 0x9c, 0x4f, 0x9f, 0xd0, 0xf0, 0x9a, 0x36,
	0xeb, 0x8c, 0xfd, 0xf3, 0xe9, 0x88, 0xb2, 0xff, 0xa7, 0x46, 0xcb, 0xb1, 0xd5, 0x29, 0xe7, 0xac,
	0x5b, 0x38, 0x1d, 0x99, 0x0f, 0xe4, 0x4a, 0xde, 0x31, 0xeb, 0xa4, 0x5a, 0xb4, 0xe9, 0x67, 0x02,
	0xbe, 0x31, 0x68, 0xa2, 0xc4, 0xec, 0xce, 0x4d, 0x1a, 0x58, 0x8f, 0xfa, 0x97, 0x2d, 0x3a, 0x49,
	0x94, 0x98, 0xbd, 0x20, 0x07, 0xf4, 0x0b, 0x01, 0x30, 0x72, 0x5e, 0x63, 0x81, 0x1a, 0xef, 0x5c,
	0xd0, 0xbe, 0x15, 0xf4, 0xe8, 0x60, 0xe7, 0x92, 0x20, 0x61, 0x05, 0x4c, 0x60, 0xea, 0xdb, 0x1f,
	0x35, 0x69, 0x4f, 0x93, 0x9e, 0x8d, 0x9e, 0xff, 0x09, 0x00, 0x00, 0xff, 0xff, 0xe1, 0x84, 0xde,
	0x20, 0x0c, 0x04, 0x00, 0x00,
}
